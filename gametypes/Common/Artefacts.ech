int bClearConsole;

enum comboArtifacts
{
	"translateArtifactsOff",
	"translateArtifactsOnSupplementsOff",
	"translateArtifactsOffSupplementsOn",
	"translateArtifactsOnSupplementsOn",
		multi:
	"translateArtifactsMode"
}


function void CreateArtefactIfNumberMatches(int x, int y, string ArtName, int iIndex, int iRandNum)
/* Tworzy artefakt, jeśli wylosowany numer jest zgodny z indeksem artefaktu.
   Indeks artefaktów definujemy w funkcji CreateRandomArtefact
*/
{
	if ( iIndex == iRandNum ) CreateArtefact(ArtName, x, y, 0, 0);
}


function void CreateRandomArtefact(int x, int y, int bMagicArtefacts)
// Losuje artefakt, który ma się pojawić na mapie
{
	int nRandNum;
    // Losujemy artefakty w zależności od trybu. Dla trybu 'Miecze i Sandały' pomijamy magiczne artefakty.
	if(bMagicArtefacts)
	{
		nRandNum = RAND(33);
	}
	else
	{
		nRandNum = RAND(24);
	}

	CreateArtefactIfNumberMatches(x, y, "ART_HELMET3",           0, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_HELMET3A",          1, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_HELMET4",           2, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_HELMET4A",          3, nRandNum);	
	CreateArtefactIfNumberMatches(x, y, "ART_SWORD3",            4, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_SWORD3A",           5, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_SWORD4",            6, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_SWORD4A",           7, nRandNum);		
	CreateArtefactIfNumberMatches(x, y, "ART_SPEAR5",            8, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_SPEAR6",            9, nRandNum);	
	CreateArtefactIfNumberMatches(x, y, "ART_AXE5",              10, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_AXE6",              11, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_BOW5",              12, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_BOW6",              13, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_ARMOUR3A",          14, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_ARMOUR4",           15, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_ARMOUR4A",          16, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_SHIELD2H",          17, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_SHIELD3",           18, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_SHIELD3A",          19, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_SHIELD3B",          20, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_SHIELD4",           21, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_SHIELD4A",          22, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_SHIELD4B",          23, nRandNum);

	CreateArtefactIfNumberMatches(x, y, "ART_AMULET_SHIELD1",    24, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_AMULET_SHIELD2",    25, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_AMULET_SHIELD3",    26, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_AMULET_MAXMAGIC1",  27, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_AMULET_MAXMAGIC2",  28, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_AMULET_MAXMAGIC3",  29, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_AMULET_REGMAGIC1",  30, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_AMULET_REGMAGIC2",  31, nRandNum);
	CreateArtefactIfNumberMatches(x, y, "ART_AMULET_REGMAGIC3",  32, nRandNum);
	
}

function void CreateRandomSupplement(int x, int y)
// Losuje jaki wspomagacz pojawi się na mapie
{
	int nRandNum;
	nRandNum = RAND(10);

    CreateArtefactIfNumberMatches(x, y, "ART_ADD_HP_GE_050",       0, nRandNum);
    CreateArtefactIfNumberMatches(x, y, "ART_ADD_HP_GE_100",      1, nRandNum);
    CreateArtefactIfNumberMatches(x, y, "ART_ADD_HP_GE_200",      2, nRandNum);

	CreateArtefactIfNumberMatches(x, y, "ART_ADD_DAMAGE_GE_005",  3, nRandNum);
    CreateArtefactIfNumberMatches(x, y, "ART_ADD_DAMAGE_GE_010",  4, nRandNum);
    CreateArtefactIfNumberMatches(x, y, "ART_ADD_DAMAGE_GE_020",  5, nRandNum);
    
	CreateArtefactIfNumberMatches(x, y, "ART_MILK_GE_100", 6, nRandNum);
    CreateArtefactIfNumberMatches(x, y, "ART_MILK_GE_200", 7, nRandNum);
    CreateArtefactIfNumberMatches(x, y, "ART_MILK_GE_300", 8, nRandNum);
    CreateArtefactIfNumberMatches(x, y, "ART_MILK_GE_400", 9, nRandNum);

}

function void CreatePrize(int comboArtifacts, int bMagicArtefacts)
{
	/*
	 	Znajduje położenie na mapie odpowiednie położenie na mapie i tworzy artefakt

		args:
		comboArtifacts - rodzaj artefaktów wybrany przez gracza w menu, tj. artefakty, wspomagacze, artefakty + wspomagacze
	 	bMagicArtefacts - bool, który uwzględnia czy tworzyć ekwipunek dla magów. Wykorzystywane w trybie 'Miecze i Sandały'
	*/
	int i, j, k;
	int x, y, z;
	
	int nRandNum;
	int nPrize;

	player rPlayer;

	if(comboArtifacts==0)
	{
		return;
	}
	
	nRandNum = RAND(8);

	x = 0;
	y = 0;
			
	for (i=0; i<8; ++i)
	{
        // losowe wybranie gracza od, którego zaczynamy
		j = (nRandNum + i) % 8;

		rPlayer = GetPlayer(j);

		if (rPlayer!=null && rPlayer.IsAlive())
		/* Dla losowo wybranego gracza sprawdzamy losowo pozycje, w których można umiesić item.
           Jeśli można do niego dojść to idziemy dalej
		   Jeśli nie to dalej losujemy lub wybieramy innego gracza */
		{
			for (k=0; k<3; ++k)
			{
                // losujemy pozycje na mapie, ale omijając margines mapy
				x = RAND(GetRight()-40) + 20;
				y = RAND(GetBottom()-40) + 20;
				z = 0;

				if (IsPathAccessible(rPlayer.GetStartingPointX(), rPlayer.GetStartingPointY(), 0, x, y, z, true, false, true))
				{
					break;
				}
				else
				{
					x = 0;
					y = 0;
				}
			}
		}

		if(x!=0)
		// Jeśli znaleźliśmy pozycje to kończymy losowanie
		{
			break;
		}
	}

	if(x==0)
	// Jeśli nie znaleźliśmy odpowiedniej pozycji to nie tworzymy artefaktu
	{
		return;
	}

    // W zależności od wyboru w menu tworzymy artefakt bądź wspomagacz
	if(comboArtifacts==1)
	{
		CreateRandomArtefact(x, y, bMagicArtefacts);
	}
	else if(comboArtifacts==2)
	{
		CreateRandomSupplement(x, y);
	}
	else if(comboArtifacts==3)
	{
		nRandNum = RAND(3);
		if(nRandNum < 2)
		{
			CreateRandomArtefact(x, y, bMagicArtefacts);
		}
		else
		{
			CreateRandomSupplement(x, y);	
		}
	}

	SetConsoleText("translateArtifactCreated");

	AddWorldMapSign(x, y, z, 0, 1200);

}

function void MakeEquipmentFromTimeToTime(int comboArtifacts, int bMagicArtefacts)
{
	/*
		Tworzy ekwipunek na mapie z prawdopobieństwem zależnym od liczby graczy oraz rozmiaru mapy

		args:
		comboArtifacts - rodzaj artefaktów wybrany przez gracza w menu
	 	bMagicArtefacts - bool, który uwzględnia czy tworzyć ekwipunek dla magów
	*/
	int i;
	int iNumberOfPlayers;
	int iSizeModficator;

	player rPlayer;
	iNumberOfPlayers = 0;
	

	if (GetMissionTime() > 60 * MINUTE)
	// Po godzinie gry wyłączamy spawnowanie artefaktów, aby nie zaspamować mapy
	{
		return;
	}

	if(bClearConsole)
	// Czyścimy ekran po poprzednim komunikacie
	{
		SetConsoleText("");
		bClearConsole=false;
	}

	for(i=0; i<maxNormalPlayersCnt; i=i+1)
	// Zliczamy liczbę graczy
	{
		rPlayer = GetPlayer(i);	
		if (rPlayer!=null &&  rPlayer.IsAlive()) ++iNumberOfPlayers;
	}

	// Na mniejszych mapach generujemy trochę mniej artefaktów
	if(GetRight() + GetBottom() > 500)
	{
		iSizeModficator = 0;
	}
	else if(GetRight()+GetBottom() > 400)
	{
		iSizeModficator = 1;
	}
	else if(GetRight()+GetBottom() > 300)
	{
		iSizeModficator = 2;
	}
	else if(GetRight()+GetBottom() > 200)
	{
		iSizeModficator = 3;
	}
	else
	{
		iSizeModficator = 4;
	}
	

	// Poniżej wartości są dobrane, aby wartość oczekiwana artefaktów w ciągu godziny była odpowiednia
	// 	Liczba artefaktów wygerowanych to P(1) * K. P(1) to szansa na artefakt a K liczba losowań w ciągu godziny
	//  Zegar jest ustawiony co 30 sekund, więc K = 120. Jeśli P(1)=0.25, to będzie średnio 30 artefaktów
	if(iNumberOfPlayers>=6)
	{
		if(RAND(100) < 20-iSizeModficator)
		{
			CreatePrize(comboArtifacts, bMagicArtefacts);
			bClearConsole=true;
		}			
	}
	else if (iNumberOfPlayers>=4)
	{
		if(RAND(100) < 14-iSizeModficator)
		{
			CreatePrize(comboArtifacts, bMagicArtefacts);
			bClearConsole=true;
		}		
	}
	else
	{
		if(RAND(100) < 9-iSizeModficator)
		{
			CreatePrize(comboArtifacts, bMagicArtefacts);
			bClearConsole=true;
		}		
	}
}